plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'com.amplitude:android-sdk:2.33.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.google.code.gson:gson:2.8.8'

    implementation 'androidx.core:core-ktx:1.7.0'
    testImplementation 'junit:junit:4.13.2'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
}

afterEvaluate {
    publishing {
        publications {

            release(MavenPublication) {

                from components.release

                pom {
                    name = project.name
                    description = POM_DESCRIPTION
                    url = POM_URL

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }


                }

                groupId = 'com.palta'
                artifactId = 'analytics'
                version = '1.0'
            }
        }

        repositories {
            maven {

                def releasesRepoUrl = layout.buildDirectory.dir(getReleaseRepositoryUrl())
                def snapshotsRepoUrl = layout.buildDirectory.dir(getSnapshotRepositoryUrl())

                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                setAllowInsecureProtocol(true)
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }
}

def getReleaseRepositoryUrl() {
    return hasProperty('mavenReleaseUrl') ? url : ""
}

def getSnapshotRepositoryUrl() {
    return hasProperty('mavenSnapshotUrl') ? url : ""
}

def getRepositoryUsername() {
    return hasProperty('mavenUsername') ? username : ""
}

def getRepositoryPassword() {
    return hasProperty('mavenPassword') ? password : ""
}